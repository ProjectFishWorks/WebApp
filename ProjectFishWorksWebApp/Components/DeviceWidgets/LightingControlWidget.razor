@using ProjectFishWorksWebApp.Models.DeviceModels
@using MQTTnet
@inject MQTTnet.ClientLib.MqttService MqttService

<MudStack>
    @if (lightingControlDevice.ManualLEDControlOverrideSwitch)
    {
        <MudChip 
            T="string" 
            Color="MudBlazor.Color.Error">
            Intensity Overriden
        </MudChip>
    }
    <MudText Typo="Typo.h6">
        White Brightness
    </MudText>
    <MudProgressLinear Value="@lightingControlDevice.CurrentWhiteIntensity"
                       Color="MudBlazor.Color.Warning"
                       Min=0 Max=255
                       Style="height:20px;" />
    <MudText Typo="Typo.h6">
        Blue Brightness
    </MudText>
    <MudProgressLinear 
        Value="@lightingControlDevice.CurrentBlueIntensity" 
        Color="MudBlazor.Color.Info"
        Min=0 Max=255
        Style="height:20px;" />

</MudStack>

@code {
    [Parameter]
    public int SystemID { get; set; }

    [Parameter]
    public int BaseStationID { get; set; }

    [Parameter]
    public int NodeID { get; set; }

    [CascadingParameter]
    private Task<AuthenticationState>? authenticationState { get; set; }


    LightingControlDevice lightingControlDevice;

    protected override async Task OnInitializedAsync()
    {
        if (authenticationState is not null)
        {
            var authState = await authenticationState;
            lightingControlDevice = new LightingControlDevice(MqttService, authState.User.Claims.FirstOrDefault(k => k.Type == "sub").Value ?? "", this.SystemID, BaseStationID, this.NodeID);
        }
        if (MqttService.IsConnected())
        {
            MqttService.MessageReceived += MqttClient_MessageReceived;
        }
    }

    private void MqttClient_MessageReceived(object sender, MqttApplicationMessageReceivedEventArgs e)
    {
        base.StateHasChanged();
    }
}

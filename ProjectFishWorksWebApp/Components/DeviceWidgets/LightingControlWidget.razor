@using ProjectFishWorksWebApp.Models.DeviceModels
@using MQTTnet
@inject MQTTnet.ClientLib.MqttService MqttService


<MudStack Spacing="1">
    @if (lightingControlDevice.ManualOverrideSwitch)
    {
        <MudChip T="string"
                 Color="MudBlazor.Color.Error">
            Intensity Overriden
        </MudChip>
    }
    <MudText Typo="Typo.h6">White 1 Brightness</MudText>
    <MudProgressLinear Value="@lightingControlDevice.CurrentWhite_1_Intensity"
                       Color="MudBlazor.Color.Warning"
                       Min=0 Max=100
                       Style="height:20px;" />
    <MudText Typo="Typo.h6">White 2 Brightness</MudText>
    <MudProgressLinear Value="@lightingControlDevice.CurrentWhite_2_Intensity"
                       Color="MudBlazor.Color.Warning"
                       Min=0 Max=100
                       Style="height:20px;" />
    <MudText Typo="Typo.h6">Blue 1 Brightness</MudText>
    <MudProgressLinear Value="@lightingControlDevice.CurrentBlue_1_Intensity"
                       Color="MudBlazor.Color.Info"
                       Min=0 Max=100
                       Style="height:20px;" />
    <MudText Typo="Typo.h6">Blue 2 Brightness</MudText>
    <MudProgressLinear Value="@lightingControlDevice.CurrentBlue_2_Intensity"
                       Color="MudBlazor.Color.Info"
                       Min=0 Max=100
                       Style="height:20px;" />
</MudStack>

@code {
    [Parameter]
    public int SystemID { get; set; }

    [Parameter]
    public int BaseStationID { get; set; }

    [Parameter]
    public int NodeID { get; set; }


    LightingControlDevice lightingControlDevice;

    protected override async Task OnInitializedAsync()
    {
        lightingControlDevice = new LightingControlDevice(MqttService, this.SystemID, BaseStationID, this.NodeID);

        if (MqttService.IsConnected())
        {
            MqttService.MessageReceived += MqttClient_MessageReceived;
        }
    }

    private void MqttClient_MessageReceived(object sender, MqttApplicationMessageReceivedEventArgs e)
    {
        base.StateHasChanged();
    }
}

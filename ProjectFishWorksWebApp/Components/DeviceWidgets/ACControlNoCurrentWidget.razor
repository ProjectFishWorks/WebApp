@using MQTTnet
@using ProjectFishWorksWebApp.Models
@using ProjectFishWorksWebApp.Models.DeviceModels
@using ApexCharts

@inject MQTTnet.ClientLib.MqttService MqttService

<MudGrid>
    <MudItem xs="6">
        <MudCard>
            <MudCardContent>
                <MudStack Spacing="3">
                    <MudText Typo="Typo.h4">Outlet #1</MudText>
                    <MudSwitch Size="MudBlazor.Size.Large"
                               @bind-Value="aCControlDevice.Relay1Control"
                               Color="MudBlazor.Color.Success"
                               UncheckedColor="MudBlazor.Color.Error"
                               Disabled="@aCControlDevice.RelayOneInAlert">
                    </MudSwitch>

                    <MudChip T="string" Color="@(aCControlDevice.RelayOneInAlert ? MudBlazor.Color.Error : MudBlazor.Color.Success)">
                        @(aCControlDevice.RelayOneInAlert ? "Alert!" : "No Alert")
                    </MudChip>
                </MudStack>
            </MudCardContent>
        </MudCard>
    </MudItem>
    <MudItem xs="6">
        <MudCard>
            <MudCardContent>
                <MudStack Spacing="3">
                    <MudText Typo="Typo.h4">Outlet #2</MudText>
                    <MudSwitch Size="MudBlazor.Size.Large"
                               @bind-Value="aCControlDevice.Relay2Control"
                               Color="MudBlazor.Color.Success"
                               UncheckedColor="MudBlazor.Color.Error"
                               Disabled="@aCControlDevice.RelayTwoInAlert">
                    </MudSwitch>
                    <MudChip T="string" Color="@(aCControlDevice.RelayTwoInAlert ? MudBlazor.Color.Error : MudBlazor.Color.Success)">
                        @(aCControlDevice.RelayTwoInAlert ? "Alert!" : "No Alert")
                    </MudChip>
                </MudStack>
            </MudCardContent>
        </MudCard>
    </MudItem>
</MudGrid>


@code {
    [Parameter]
    public int systemID { get; set; } = 0;
    [Parameter]
    public int basestationID { get; set; } = 0;
    [Parameter]
    public int nodeID { get; set; } = 0;

    [CascadingParameter]
    private Task<AuthenticationState>? authenticationState { get; set; }

    ACControlDevice aCControlDevice;


    protected override async Task OnInitializedAsync()
    {

        //Create the TesterHatDevice data model
        if (authenticationState is not null)
        {
            var authState = await authenticationState;
            this.aCControlDevice = new ACControlDevice(MqttService, authState.User.Claims.FirstOrDefault(k => k.Type == "sub").Value ?? "", this.systemID, this.basestationID, this.nodeID);
        }

        if (MqttService.IsConnected())
        {
            MqttService.MessageReceived += MqttClient_MessageReceived;
        }
    }

    private void MqttClient_MessageReceived(object sender, MqttApplicationMessageReceivedEventArgs e)
    {
        base.StateHasChanged();
    }



}

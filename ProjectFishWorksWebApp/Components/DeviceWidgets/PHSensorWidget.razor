@using MQTTnet
@using ProjectFishWorksWebApp.Models.DeviceModels
@inject MQTTnet.ClientLib.MqttService MqttService


<MudStack Spacing="3">
    <MudProgressLinear Value="(double)PHsensor.pHvalue"
                       Min="0"
                       Max="14"
                       Style="height:40px"
                       Color="getBarColor(PHsensor.pHAlarmLow, PHsensor.pHAlarmHigh,PHsensor.pHvalue,PHsensor.pHAlarmOnOff)">
        <MudText Typo="Typo.h4">
            <b>@(Math.Round((decimal)PHsensor.pHvalue, 2))</b>
        </MudText>
    </MudProgressLinear>
</MudStack>

@code {

    [Parameter]
    public int SystemID { get; set; }

    [Parameter]
    public int BaseStationID { get; set; }

    [Parameter]
    public int NodeID { get; set; }

    PHSensorDevice PHsensor;

    private MudBlazor.Color getBarColor(float? min, float? max, float? value, bool alarm)
    {
        if (min == null || max == null || value == null)
        {
            return MudBlazor.Color.Success;
        }
        if (!alarm)
        {
            return MudBlazor.Color.Success;
        }

        if (value < min || value > max)
        {
            return MudBlazor.Color.Error;
        }
        else
        {
            return MudBlazor.Color.Success;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        this.PHsensor = new PHSensorDevice(MqttService, this.SystemID, this.BaseStationID, this.NodeID);

        if (MqttService.IsConnected())
        {
            MqttService.MessageReceived += MqttClient_MessageReceived;
        }
    }

    private void MqttClient_MessageReceived(object sender, MqttApplicationMessageReceivedEventArgs e)
    {
        base.StateHasChanged();
    }
}

@using MQTTnet
@using ProjectFishWorksWebApp.Models.DeviceModels
@inject MQTTnet.ClientLib.MqttService MqttService



<MudGrid>
    <MudItem xs="6">
        <MudStack Spacing="3">
            <MudText Typo="Typo.h6">Ambient Humidity</MudText>
            <MudProgressLinear Value="(double)tempHum.CanopyHum"
                               Min="(double)((tempHum.CanopyHumAlarmLow ?? 10) - 10)"
                               Max="(double)((tempHum.CanopyHumAlarmHigh ?? 90) + 10)"
                               Style="height:40px"
                               Color="@(getBarColor(tempHum.CanopyHumAlarmLow, tempHum.CanopyHumAlarmHigh, tempHum.CanopyHum, tempHum.CanopyHumAlarmOnOff))">
                <MudText Typo="Typo.h4"><b>@tempHum.CanopyHum %</b></MudText>
            </MudProgressLinear>

            <MudText Typo="Typo.h6">Ambient Temp</MudText>
            <MudProgressLinear Value="(double)tempHum.CanopyTemp"
                               Min="(double)(tempHum.CanopyTempAlarmLow ?? 20) - 5"
                               Max="(double)(tempHum.CanopyTempAlarmHigh ?? 20) + 5"
                               Style="height:40px"
                               Color="@(getBarColor(tempHum.CanopyTempAlarmLow, tempHum.CanopyTempAlarmHigh, tempHum.CanopyTemp, tempHum.CanopyTempAlarmOnOff))">
                <MudText Typo="Typo.h4"><b>@tempHum.CanopyTemp °C</b></MudText>
            </MudProgressLinear>
        </MudStack>
    </MudItem>
    <MudItem xs="6">
        <MudStack Spacing="3">
            <MudText Typo="Typo.h6">Tank Temp</MudText>
            <MudProgressLinear Value="(double)tempHum.TankTemp"
                               Min="(double)(tempHum.TankTempAlarmLow ?? 20) - 2"
                               Max="(double)(tempHum.TankTempAlarmHigh ?? 20) + 2"
                               Style="height:40px"
                               Color="@(getBarColor(tempHum.TankTempAlarmLow, tempHum.TankTempAlarmHigh, tempHum.TankTemp, tempHum.TankTempAlarmOnOff))">
                <MudText Typo="Typo.h4"><b>@tempHum.TankTemp °C</b></MudText>
            </MudProgressLinear>

            <MudText Typo="Typo.h6">Sump Temp</MudText>
            <MudProgressLinear Value="(double)tempHum.SumpTemp"
                               Min="(double)(tempHum.SumpTempAlarmLow ?? 20) - 2"
                               Max="(double)(tempHum.SumpTempAlarmHigh ?? 20) + 2"
                               Style="height:40px"
                               Color="@(getBarColor(tempHum.SumpTempAlarmLow, tempHum.SumpTempAlarmHigh, tempHum.SumpTemp, tempHum.SumpTempAlarmOnOff))">
                <MudText Typo="Typo.h4"><b>@tempHum.SumpTemp °C</b></MudText>
            </MudProgressLinear>
        </MudStack>
    </MudItem>
</MudGrid>

@code {

    [Parameter]
    public int SystemID { get; set; }

    [Parameter]
    public int BaseStationID { get; set; }

    [Parameter]
    public int NodeID { get; set; }

    [CascadingParameter]
    private Task<AuthenticationState>? authenticationState { get; set; }

    TempHumDevice tempHum;

    private MudBlazor.Color getBarColor(float? min, float? max, float? value, bool alarm)
    {
        if(min == null || max == null || value == null)
        {
            return MudBlazor.Color.Success;
        }
        if (!alarm)
        {
            return MudBlazor.Color.Success;
        }
        if(value < min)
        {
            return MudBlazor.Color.Info;
        }else if(value > max)
        {
            return MudBlazor.Color.Error;
        }
        else
        {
            return MudBlazor.Color.Success;
        }
    } 

    protected override async Task OnInitializedAsync()
    {
        if (authenticationState is not null)
        {
            var authState = await authenticationState;
            this.tempHum = new TempHumDevice(MqttService, authState.User.Claims.FirstOrDefault(k => k.Type == "sub").Value ?? "", this.SystemID, this.BaseStationID, this.NodeID);
        }

        if (MqttService.IsConnected())
        {
            MqttService.MessageReceived += MqttClient_MessageReceived;
        }
    }

    private void MqttClient_MessageReceived(object sender, MqttApplicationMessageReceivedEventArgs e)
    {
        base.StateHasChanged();
    }
    }

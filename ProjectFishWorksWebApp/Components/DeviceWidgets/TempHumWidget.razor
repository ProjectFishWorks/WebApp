@using MQTTnet
@using ProjectFishWorksWebApp.Models.DeviceModels
@inject MQTTnet.ClientLib.MqttService MqttService


<MudGrid>
    <MudItem xs="6">
        <MudStack>
            <MudText Typo="Typo.subtitle2" Align="MudBlazor.Align.Right">
                Tank Humidity:
            </MudText>
            <MudText Typo="Typo.subtitle2" Align="MudBlazor.Align.Right">
                Canopy Temperature:
            </MudText>
            <MudText Typo="Typo.subtitle2" Align="MudBlazor.Align.Right">
                Tank Temperature:
            </MudText>
            <MudText Typo="Typo.subtitle2" Align="MudBlazor.Align.Right">
                Sump Temperature:
            </MudText>
        </MudStack>
    </MudItem>
    <MudItem xs="6">
        <MudStack>
            <MudText Typo="Typo.subtitle2" Align="MudBlazor.Align.Left">
                @tempHum.CanopyHum %
            </MudText>
            <MudText Typo="Typo.subtitle2" Align="MudBlazor.Align.Left">
                @tempHum.CanopyTemp °C
            </MudText>
            <MudText Typo="Typo.subtitle2" Align="MudBlazor.Align.Left">
                @tempHum.TankTemp °C
            </MudText>
            <MudText Typo="Typo.subtitle2" Align="MudBlazor.Align.Left">
                @tempHum.SumpTemp °C
            </MudText>
        </MudStack>
    </MudItem>
</MudGrid>


<MudChip T="string" Color="MudBlazor.Color.Success">No Alarms</MudChip>


@code {

    [Parameter]
    public int SystemID { get; set; }

    [Parameter]
    public int BaseStationID { get; set; }

    [Parameter]
    public int NodeID { get; set; }

    TempHumDevice tempHum;

    protected override async Task OnInitializedAsync()
    {
        this.tempHum = new TempHumDevice(MqttService, this.SystemID, this.BaseStationID, this.NodeID);

        if (MqttService.IsConnected())
        {
            MqttService.MessageReceived += MqttClient_MessageReceived;
        }
    }

    private void MqttClient_MessageReceived(object sender, MqttApplicationMessageReceivedEventArgs e)
    {
        base.StateHasChanged();
    }
    }

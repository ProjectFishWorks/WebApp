@using MQTTnet
@using ProjectFishWorksWebApp.Models.DeviceModels
@inject MQTTnet.ClientLib.MqttService MqttService


<MudGrid>
    <MudItem xs="6">
        <MudStack>
            <MudText Typo="Typo.body1" Align="MudBlazor.Align.Right" >
                <b>Tank Humidity:</b>
            </MudText>
            <MudText Typo="Typo.body1" Align="MudBlazor.Align.Right">
                <b>Canopy Temperature:</b>
            </MudText>
            <MudText Typo="Typo.body1" Align="MudBlazor.Align.Right">
                <b>Tank Temperature:</b>
            </MudText>
            <MudText Typo="Typo.body1" Align="MudBlazor.Align.Right">
                <b>Sump Temperature:</b>
            </MudText>
        </MudStack>
    </MudItem>
    <MudItem xs="6">
        <MudStack>
            <MudText Typo="Typo.body1" Align="MudBlazor.Align.Left" Color="@((tempHum.CanopyHum > tempHum.CanopyHumAlarmHigh || tempHum.CanopyHum < tempHum.CanopyHumAlarmLow) ? MudBlazor.Color.Error : MudBlazor.Color.Default)">
                <b>@tempHum.CanopyHum %</b>
            </MudText>
            <MudText Typo="Typo.body1" Align="MudBlazor.Align.Left" Color="@((tempHum.CanopyTemp > tempHum.CanopyTempAlarmHigh || tempHum.CanopyTemp < tempHum.CanopyTempAlarmLow) ? MudBlazor.Color.Error : MudBlazor.Color.Default)">
                <b>@tempHum.CanopyTemp °C</b>
            </MudText>
            <MudText Typo="Typo.body1" Align="MudBlazor.Align.Left" Color="@((tempHum.TankTemp > tempHum.TankTempAlarmHigh || tempHum.TankTemp < tempHum.TankTempAlarmLow) ? MudBlazor.Color.Error : MudBlazor.Color.Default)">
                <b>@tempHum.TankTemp °C</b>
            </MudText>
            <MudText Typo="Typo.body1" Align="MudBlazor.Align.Left" Color="@((tempHum.SumpTemp > tempHum.SumpTempAlarmHigh || tempHum.SumpTemp < tempHum.SumpTempAlarmLow) ? MudBlazor.Color.Error : MudBlazor.Color.Default)">
                <b>@tempHum.SumpTemp °C</b>
            </MudText>
        </MudStack>
    </MudItem>
    <MudItem xs="6">
        @if(tempHum.Alarm)
        {
            <MudChip T="string" Color="MudBlazor.Color.Error">Alarm</MudChip>
        }
        else
        {
            <MudChip T="string" Color="MudBlazor.Color.Success">No Alarms</MudChip>
        }
    </MudItem>
</MudGrid>




@code {

    [Parameter]
    public int SystemID { get; set; }

    [Parameter]
    public int BaseStationID { get; set; }

    [Parameter]
    public int NodeID { get; set; }

    TempHumDevice tempHum;

    protected override async Task OnInitializedAsync()
    {
        this.tempHum = new TempHumDevice(MqttService, this.SystemID, this.BaseStationID, this.NodeID);

        if (MqttService.IsConnected())
        {
            MqttService.MessageReceived += MqttClient_MessageReceived;
        }
    }

    private void MqttClient_MessageReceived(object sender, MqttApplicationMessageReceivedEventArgs e)
    {
        base.StateHasChanged();
    }
    }

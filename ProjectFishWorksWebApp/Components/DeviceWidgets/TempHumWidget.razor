@using MQTTnet
@using ProjectFishWorksWebApp.Models.DeviceModels
@inject MQTTnet.ClientLib.MqttService MqttService


<MudStack Spacing="3">
    <MudText Typo="Typo.h6">Canopy Humidty</MudText>
    <MudProgressLinear Value="(double)tempHum.CanopyHum"
                       Min="(double)tempHum.CanopyHumAlarmLow"
                       Max="(double)tempHum.CanopyHumAlarmHigh"
                       Style="height:40px"
                       Color="MudBlazor.Color.Success">
        <MudText Typo="Typo.h4"><b>@tempHum.CanopyHum %</b></MudText>
    </MudProgressLinear>

    <MudText Typo="Typo.h6">Canopy Temperature</MudText>
    <MudProgressLinear Value="(double)tempHum.CanopyTemp"
                       Min="(double)tempHum.CanopyTempAlarmLow - 5"
                       Max="(double)tempHum.CanopyTempAlarmHigh + 5"
                       Style="height:40px"
                       Color="@(getBarColor(tempHum.CanopyTempAlarmLow, tempHum.CanopyTempAlarmHigh, tempHum.CanopyTemp))">
        <MudText Typo="Typo.h4"><b>@tempHum.CanopyTemp °C</b></MudText>
    </MudProgressLinear>

    <MudText Typo="Typo.h6">Tank Temperature</MudText>
    <MudProgressLinear Value="(double)tempHum.TankTemp"
                       Min="(double)tempHum.TankTempAlarmLow - 2"
                       Max="(double)tempHum.TankTempAlarmHigh + 2"
                       Style="height:40px"
                       Color="MudBlazor.Color.Success">
        <MudText Typo="Typo.h4"><b>@tempHum.TankTemp °C</b></MudText>
    </MudProgressLinear>

    <MudText Typo="Typo.h6">Sump Temperature</MudText>
    <MudProgressLinear Value="(double)tempHum.SumpTemp"
                       Min="(double)tempHum.SumpTempAlarmLow - 2"
                       Max="(double)tempHum.SumpTempAlarmHigh + 2"
                       Style="height:40px"
                       Color="MudBlazor.Color.Success">
        <MudText Typo="Typo.h4"><b>@tempHum.SumpTemp °C</b></MudText>
    </MudProgressLinear>

</MudStack>







@code {

    [Parameter]
    public int SystemID { get; set; }

    [Parameter]
    public int BaseStationID { get; set; }

    [Parameter]
    public int NodeID { get; set; }

    TempHumDevice tempHum;

    private MudBlazor.Color getBarColor(float? min, float? max, float? value)
    {
        if(value < min)
        {
            Console.WriteLine("Low");
            return MudBlazor.Color.Info;
        }else if(value > max)
        {
            Console.WriteLine("High");
            return MudBlazor.Color.Error;
        }
        else
        {
            Console.WriteLine("good");
            return MudBlazor.Color.Success;
        }
    } 

    protected override async Task OnInitializedAsync()
    {
        this.tempHum = new TempHumDevice(MqttService, this.SystemID, this.BaseStationID, this.NodeID);

        if (MqttService.IsConnected())
        {
            MqttService.MessageReceived += MqttClient_MessageReceived;
        }
    }

    private void MqttClient_MessageReceived(object sender, MqttApplicationMessageReceivedEventArgs e)
    {
        base.StateHasChanged();
    }
    }

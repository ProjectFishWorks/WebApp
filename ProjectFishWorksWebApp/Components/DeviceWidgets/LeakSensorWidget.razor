@using MQTTnet
@using ProjectFishWorksWebApp.Models.DeviceModels
@inject MQTTnet.ClientLib.MqttService MqttService

    <MudStack>
        @if (leakSensorDevice.Leak1Detected || leakSensorDevice.Leak2Detected || leakSensorDevice.Leak3Detected || leakSensorDevice.Leak4Detected)
        {
            <MudChip T="string"
                     Color="MudBlazor.Color.Error">
                Leak Detected
            </MudChip>
        }
        else
        {
            <MudChip T="string"
                     Color="MudBlazor.Color.Success">
                No Leak Detected
            </MudChip>
        }
    @if (leakSensorDevice.HighWaterLevel1 || leakSensorDevice.HighWaterLevel2 || leakSensorDevice.HighWaterLevel3 || leakSensorDevice.HighWaterLevel4)
        {
            <MudChip T="string"
                     Color="MudBlazor.Color.Error">
                High Water Level
            </MudChip>
        }
        else
        {
            <MudChip T=string
                     Color="MudBlazor.Color.Success">
                Normal Water Level
            </MudChip>
        }
    </MudStack>


@code
{
    [Parameter]
    public int SystemID { get; set; }

    [Parameter]
    public int BaseStationID { get; set; }

    [Parameter]
    public int NodeID { get; set; }

    [CascadingParameter]
    private Task<AuthenticationState>? authenticationState { get; set; }


    LeakSensorDevice leakSensorDevice;

    protected override async Task OnInitializedAsync()
    {

        if (authenticationState is not null)
        {
            var authState = await authenticationState;
            this.leakSensorDevice = new LeakSensorDevice(MqttService, authState.User.Claims.FirstOrDefault(k => k.Type == "sub").Value ?? "", this.SystemID, BaseStationID, this.NodeID);
        }
        if (MqttService.IsConnected())
        {
            MqttService.MessageReceived += MqttClient_MessageReceived;
        }
    }

    private void MqttClient_MessageReceived(object sender, MqttApplicationMessageReceivedEventArgs e)
    {
        base.StateHasChanged();
    }

}

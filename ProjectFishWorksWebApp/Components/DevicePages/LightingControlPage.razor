@using MQTTnet
@inject MQTTnet.ClientLib.MqttService MqttService
@using ProjectFishWorksWebApp.Models.DeviceModels
@inject MQTTnet.ClientLib.MqttService MqttService


 

<!--  ......................................Manual adjusment LED override switch and sliders................................  -->

<MudCard Outlined=true>
    <MudCardContent>
        <MudStack Row="true">
            <MudSwitch @bind-Value="lightingControlDevice.ManualLEDControlOverrideSwitch"
                        Color="MudBlazor.Color.Error" />
            <MudText Typo="Typo.h6">Override Lighting Intensity</MudText>
        </MudStack>
        <MudDivider/>
        <MudCollapse Expanded="@lightingControlDevice.ManualLEDControlOverrideSwitch">
            <MudGrid>
                <MudItem xs="12">
                    <MudSlider @bind-Value="lightingControlDevice.OverrideWhiteIntensity"
                                Variant="Variant.Filled"
                                Color="MudBlazor.Color.Warning"
                                Min=0 Max=255
                                Disabled="@(!lightingControlDevice.ManualLEDControlOverrideSwitch)">
                        <MudText Typo="Typo.h6">White</MudText>
                    </MudSlider>
                </MudItem>
                <MudItem xs="12">
                    <MudSlider @bind-Value="lightingControlDevice.OverrideBlueIntensity"
                                Variant="Variant.Filled"
                                Min=0 Max=255
                                Disabled="@(!lightingControlDevice.ManualLEDControlOverrideSwitch)">
                        <MudText Typo="Typo.h6">Blue</MudText>
                    </MudSlider>
                </MudItem>
            </MudGrid>
        </MudCollapse>
    </MudCardContent>
</MudCard>


<!--  ......................................Adjust Demo Loop Durations seconds................................  -->

<MudText Justify="Justify.Center" Typo="Typo.h6">White</MudText>
<MudProgressLinear Vertical="false"
                    Color="MudBlazor.Color.Warning"
                    Rounded="true" MudBlazor.Size="Size.large"
                    Style="height:40px;"
                    Value="@(lightingControlDevice.CurrentWhiteIntensity / 255.0 * 100.0)"
                    Min="0" Max="100">
    <MudText Typo="Typo.subtitle1"
                Color="MudBlazor.Color.Dark"
                Min="0" Max="100">
        <b>@(Math.Clamp(Math.Round((lightingControlDevice.CurrentWhiteIntensity / 255M * 100M), 0), 0, 100))%</b>
    </MudText>
</MudProgressLinear>

<MudText Justify="Justify.Center" Typo="Typo.h6">Blue</MudText>
<MudProgressLinear Vertical="false"
                    Color="MudBlazor.Color.Info"
                    Rounded="true" MudBlazor.Size="Size.large"
                    Style="height:40px;"
                    Value="@(lightingControlDevice.CurrentBlueIntensity / 255.0 * 100.0)"
                    Min="0" Max="100">
    <MudText Typo="Typo.subtitle1"
                Color="MudBlazor.Color.Dark">
        <b>@(Math.Clamp(Math.Round((lightingControlDevice.CurrentBlueIntensity / 255M * 100M), 0), 0, 100))%</b>
    </MudText>
</MudProgressLinear>


<MudGrid Spacing="10">
    <MudItem xs="6">
        <MudText Typo="Typo.h6">Demo Loop Durations (Seconds)</MudText>
        <MudNumericField @bind-Value="lightingControlDevice.DawnTime" Label="Dawn" Variant="Variant.Outlined" Min="5" Max="30" />
        <MudNumericField @bind-Value="lightingControlDevice.SunriseTime" Label="Sunrise" Variant="Variant.Outlined" Min="2" Max="30" />
        <MudNumericField @bind-Value="lightingControlDevice.HighNoon" Label="Noon" Variant="Variant.Outlined" Min="2" Max="30" />
        <MudNumericField @bind-Value="lightingControlDevice.SunsetTime" Label="Sunset" Variant="Variant.Outlined" Min="2" Max="30" />
        <MudNumericField @bind-Value="lightingControlDevice.DuskTime" Label="Dusk" Variant="Variant.Outlined" Min="5" Max="30" />
        <MudNumericField @bind-Value="lightingControlDevice.NightTime" Label="Night" Variant="Variant.Outlined" />
    </MudItem>
    <MudItem xs="6">
        <MudText Typo="Typo.h6">LED Maximum Intensities (%)</MudText>
        <MudNumericField @bind-Value="lightingControlDevice.MaxWhiteIntensity" Label="White" Variant="Variant.Outlined" Min="0" Max="100" />
        <MudNumericField @bind-Value="lightingControlDevice.MaxBlueIntensity" Label="Blue" Variant="Variant.Outlined" Min="0" Max="100" />
        <MudText Typo="Typo.h6">Dawn/Dusk Intensity(%)</MudText>
        <MudNumericField @bind-Value="lightingControlDevice.BlueOnlyMaxIntensity" Label="Blue Only" Variant="Variant.Outlined" Min="0" Max="100" />
    </MudItem>
</MudGrid>
        <!--  ......................................Current LED Status Progress bars.........................  -->


@code {
    [Parameter]
    public int SystemID { get; set; }

    [Parameter]
    public int BaseStationID { get; set; }

    [Parameter]
    public int NodeID { get; set; }


    LightingControlDevice lightingControlDevice;

    protected override async Task OnInitializedAsync()
    {
        this.lightingControlDevice = new LightingControlDevice(MqttService, this.SystemID, BaseStationID, this.NodeID);
        if (MqttService.IsConnected())
        {
            MqttService.MessageReceived += MqttClient_MessageReceived;
        }
    }

    private void MqttClient_MessageReceived(object sender, MqttApplicationMessageReceivedEventArgs e)
    {
        base.StateHasChanged();
    }
}



@using MQTTnet
@using ProjectFishWorksWebApp.Models.DeviceModels
@inject MQTTnet.ClientLib.MqttService MqttService

<MudCard>
    <MudCardHeader>
        <MudText 
            Typo="Typo.h4">
            Base Station
        </MudText>
    </MudCardHeader>
    <MudCardContent>
        <MudGrid>
            <MudItem xs=6>
                <MudText 
                    Typo="Typo.h6">
                    LED Brightness
                </MudText>
                    <MudNumericField 
                        @bind-Value="baseStationDevice.LEDBrightness"
                        Label="LED Brightness"
                        Variant="Variant.Outlined" 
                        Min="0" 
                        Max="100"/>
                <MudProgressLinear 
                    @bind-Value="baseStationDevice.LEDBrightness"
                    Color="MudBlazor.Color.Warning"
                    Rounded="true" MudBlazor.Size="Size.large"
                    Style="height:10px;"/>
                @if (baseStationDevice.ErrorStatus == true)
                {
                    <MudChip 
                        T="string"
                        Color="MudBlazor.Color.Error">
                        Error Detected
                    </MudChip>
                }
                else
                {
                    <MudChip 
                        T="string"
                        Color="MudBlazor.Color.Success">
                        No Error Detected
                    </MudChip>
                }
                <MudButton 
                    Variant="Variant.Filled" 
                    Color="MudBlazor.Color.Primary" 
                    FullWidth="true">
                    Remove Error
                </MudButton>
            </MudItem>
        </MudGrid>
    </MudCardContent>
</MudCard>

@code
{
    [Parameter]
    public int SystemID { get; set; }

    [Parameter]
    public int BaseStationID { get; set; }

    [Parameter]
    public int NodeID { get; set; }

    [CascadingParameter]
    private Task<AuthenticationState>? authenticationState { get; set; }


    BaseStationDevice baseStationDevice;

    protected override async Task OnInitializedAsync()
    {
        if (authenticationState is not null)
        {
            var authState = await authenticationState;
            this.baseStationDevice = new BaseStationDevice(MqttService, authState.User.Claims.FirstOrDefault(k => k.Type == "sub").Value ?? "", this.SystemID, BaseStationID, this.NodeID);
        }
        if (MqttService.IsConnected())
        {
            MqttService.MessageReceived += MqttClient_MessageReceived;
        }
    }

    private void MqttClient_MessageReceived(object sender, MqttApplicationMessageReceivedEventArgs e)
    {
        base.StateHasChanged();
    }

}
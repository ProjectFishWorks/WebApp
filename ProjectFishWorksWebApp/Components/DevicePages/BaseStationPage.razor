@using static System.DateTime
@using MQTTnet
@using ProjectFishWorksWebApp.Models.DeviceModels
@inject MQTTnet.ClientLib.MqttService MqttService

<MudGrid>
    <MudItem xs=6>
        <MudStack Spacing="3">
            <MudText>UTC Time @DateTime.UtcNow.ToString("MMMM dd yyyy, HH:mm:ss")</MudText>
            <MudText Typo="Typo.h6">Local Time @DateTime.Now.ToString("MMMM dd yyyy, HH:mm:ss")</MudText>
            <MudText>UTC Offset @DateTime.Now.ToString(" zzz")</MudText>
            <MudNumericField @bind-Value="baseStationDevice.TimeZoneOffset"
                             Label="Time Zone Offset 8 For PST"
                             Variant="Variant.Outlined"
                             Min="0"
                             Max="12" />
            <MudNumericField @bind-Value="baseStationDevice.LEDBrightness"
                             Label="LED Brightness"
                             Variant="Variant.Outlined"
                             Min="0" 
                             Max="100" />
            <MudProgressLinear Value="baseStationDevice.LEDBrightness"
                               Min="0"
                               Max="100"
                               Color="MudBlazor.Color.Warning"
                               Rounded="true" 
                               Style="height:10px;" />
            @if (baseStationDevice.IsErrors == true)
            {
                <MudChip T="string"
                         Color="MudBlazor.Color.Error">
                    Error Detected
                </MudChip>
            }
            else
            {
                <MudChip T="string"
                         Color="MudBlazor.Color.Success">
                    No Errors Detected
                </MudChip>
            }
            <MudButton Variant="Variant.Filled"
                       Color="MudBlazor.Color.Primary"
                       OnClick="resetError"
                       FullWidth="true">
                Remove Error
            </MudButton>
        </MudStack>
    </MudItem>
</MudGrid>

@code
{
    void resetError()
    {
        baseStationDevice.ResetErrors = true;
    }

    [Parameter]
    public int SystemID { get; set; }

    [Parameter]
    public int BaseStationID { get; set; }

    [Parameter]
    public int NodeID { get; set; }

    [CascadingParameter]
    private Task<AuthenticationState>? authenticationState { get; set; }


    BaseStationDevice baseStationDevice;


    protected override async Task OnInitializedAsync()
    {
        if (authenticationState is not null)
        {
            var authState = await authenticationState;
            this.baseStationDevice = new BaseStationDevice(MqttService, authState.User.Claims.FirstOrDefault(k => k.Type == "sub").Value ?? "", this.SystemID, BaseStationID, this.NodeID);
        }
        if (MqttService.IsConnected())
        {
            MqttService.MessageReceived += MqttClient_MessageReceived;
        }
    }

    private void MqttClient_MessageReceived(object sender, MqttApplicationMessageReceivedEventArgs e)
    {
        base.StateHasChanged();
    }

}
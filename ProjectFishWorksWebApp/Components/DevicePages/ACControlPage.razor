@using MQTTnet
@using ProjectFishWorksWebApp.Models
@using ProjectFishWorksWebApp.Models.DeviceModels
@using ApexCharts

@inject MQTTnet.ClientLib.MqttService MqttService

<MudGrid>
    <MudItem xs="6">
        <MudCard>
            <MudCardContent>
                <MudStack>
                    <MudText Typo="Typo.h4">Outlet #1</MudText>
                    <MudSwitch Size="MudBlazor.Size.Large"
                               @bind-Value="aCControlDevice.Relay1Control"
                               Color="MudBlazor.Color.Success"
                               UncheckedColor="MudBlazor.Color.Error"
                               Disabled="@aCControlDevice.RelayOneInAlert">
                    </MudSwitch>

                    <MudChip T="string" Color="@(aCControlDevice.RelayOneInAlert ? MudBlazor.Color.Error : MudBlazor.Color.Success)">
                        @(aCControlDevice.RelayOneInAlert ? "Alert Override!" : "No Alert Override")
                    </MudChip>
                    <MudSelect Label="Select Alert Trigger Device" @bind-Value="aCControlDevice.RelayOneAlertNode">
                        @foreach (var node in Nodes)
                        {
                            <MudSelectItem Value="@node.Key">@node.Value</MudSelectItem>
                        }
                    </MudSelect>
                </MudStack>
            </MudCardContent>
        </MudCard>
    </MudItem>
    <MudItem xs="6">
        <MudCard>
            <MudCardContent>
                <MudStack>
                    <MudText Typo="Typo.h4">Outlet #2</MudText>
                    <MudSwitch Size="MudBlazor.Size.Large"
                               @bind-Value="aCControlDevice.Relay2Control"
                               Color="MudBlazor.Color.Success"
                               UncheckedColor="MudBlazor.Color.Error"
                               Disabled="@aCControlDevice.RelayTwoInAlert">
                    </MudSwitch>
                    <MudChip T="string" Color="@(aCControlDevice.RelayTwoInAlert ? MudBlazor.Color.Error : MudBlazor.Color.Success)">
                        @(aCControlDevice.RelayTwoInAlert ? "Alert Override!" : "No Alert Override")
                    </MudChip>
                    <MudSelect Label="Select Alert Trigger Device" @bind-Value="aCControlDevice.RelayTwoAlertNode">
                        @foreach (var node in Nodes)
                        {
                            <MudSelectItem Value="@node.Key">@node.Value</MudSelectItem>
                        }
                    </MudSelect>
                </MudStack>
            </MudCardContent>
        </MudCard>

    </MudItem>
</MudGrid>

<MudCard>
    <MudCardHeader>
        <MudText Typo="Typo.h4">Power Usage</MudText>
    </MudCardHeader>
    <MudCardContent>
        <MudStack>
            <MudProgressLinear Value="(double)aCControlDevice.LineCurrent"
                               Min="0"
                               Max="12"
                               Style="height:40px"
                               Color="@(getCurrentBarColor(aCControlDevice.LineCurrent))">
                <MudText Typo="Typo.h4"><b>@aCControlDevice.LineCurrent A</b></MudText>
            </MudProgressLinear>

            <MudProgressLinear Value="(double)aCControlDevice.LineWattage"
                               Min="0"
                               Max="1200"
                               Style="height:40px"
                               Color="@(getWattageBarColor(aCControlDevice.LineWattage))">
                <MudText Typo="Typo.h4"><b>@aCControlDevice.LineWattage W</b></MudText>
            </MudProgressLinear>
        </MudStack>
    </MudCardContent>
    <HistoryChart HistoryData="@aCControlDevice.CurrentHistory"
                  NodeID="@nodeID"
                  MessageIDs="@(new Dictionary<int, HistoryChartMessageIDData>{{2562, new HistoryChartMessageIDData{PerameterName = "Total Current", XAxisName="Time" , YAxisName="Current[A]" }}})"
                  RequestData="historyChartRequestData"
                  UpdateData="historyChartUpdateData"
                  isFloatData="true" />
</MudCard>


@code {

    [Parameter]
    public int systemID { get; set; } = 0;
    [Parameter]
    public int basestationID { get; set; } = 0;
    [Parameter]
    public int nodeID { get; set; } = 0;

    ACControlDevice aCControlDevice;

    BaseStationManifests baseStationManifests;

    private Dictionary<int, string> Nodes
    {
        get
        {
            Dictionary<int, string> nodes = new();

            if(baseStationManifests == null)
            {
                return nodes;
            }

            var devices = baseStationManifests.Manifests.Find(x => x.BaseStationID == basestationID).Devices;

            foreach(var device in devices)
            {
                nodes.Add(device.NodeID, device.DeviceName);
            }
            return nodes;

        }
    }

    //Request historical data
    private void historyChartRequestData(object sender, HistoryChartDataEventArgs e)
    {
        aCControlDevice.requestHistoricalData(e.NodeID, e.MessageID, e.Hours);
    }

    //Update the historical data and chart
    private void historyChartUpdateData(object sender, HistoryChartDataEventArgs e)
    {
        aCControlDevice.CurrentHistory = aCControlDevice.updateHistoricalData(e.NodeID, e.MessageID, e.Hours);
        base.StateHasChanged();//force a re-render - !!MUST BE CALLED OR EVERYTHING BREAKS!!
    }


    protected override async Task OnInitializedAsync()
    {

        //Create the TesterHatDevice data model
        this.aCControlDevice = new ACControlDevice(MqttService, this.systemID, this.basestationID, this.nodeID);

        if (MqttService.IsConnected())
        {
            MqttService.MessageReceived += MqttClient_MessageReceived;
        }

        baseStationManifests = new BaseStationManifests(systemID, MqttService);
    }

    private void MqttClient_MessageReceived(object sender, MqttApplicationMessageReceivedEventArgs e)
    {
        base.StateHasChanged();
    }

    private MudBlazor.Color getCurrentBarColor(float? current){
        if(current == null)
        {
            return MudBlazor.Color.Success;
        }
        if(current < 10){
            return MudBlazor.Color.Success;
        }else{
            return MudBlazor.Color.Error;
        }
    }

    private MudBlazor.Color getWattageBarColor(float? wattage)
    {
        if (wattage == null)
        {
            return MudBlazor.Color.Success;
        }
        if (wattage < 1200)
        {
            return MudBlazor.Color.Success;
        }
        else
        {
            return MudBlazor.Color.Error;
        }
    }

}


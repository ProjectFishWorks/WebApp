@using ProjectFishWorksWebApp.Models
@using ProjectFishWorksWebApp.Models.DeviceModels
@using MQTTnet
@inject MQTTnet.ClientLib.MqttService MqttService


<MudCard>
    <MudCardContent>
        <MudGrid>
            <MudItem xs="6">
                <MudStack Spacing="3">
                    <MudProgressLinear Value
                                       Value="(double)((PHsensor.pHvalue ?? 0) -0)"
                                       Min="(double)((PHsensor.pHAlarmLow ?? 0) - 0)"
                                       Max="(double)((PHsensor.pHAlarmHigh ?? 14) + 14)"
                                       Style="height:40px"
                                       Color="@(getBarColor(PHsensor.CanopyHumAlarmLow, PHsensor.CanopyHumAlarmHigh, PHsensor.CanopyHum, PHsensor.CanopyHumAlarmOnOff))">
                        <MudText Typo="Typo.h4">
                            <b>@(Math.Round((decimal)PHsensor.pHvalue, 2))</b>
                        </MudText>
                        <MudText Typo="Typo.h4"><b>@PHsensor.CanopyHum %</b></MudText>
                    </MudProgressLinear>
                    KS
                </MudStack>
            </MudItem>
        </MudGrid>
    </MudCardContent>

</MudCard>

<MudCard>
    <MudCardHeader>
        <MudText Typo="Typo.h4">Alarms</MudText>
    </MudCardHeader>
    <MudCardContent>
        <MudGrid Spacing="10">
            <MudItem xs="6">
                <MudToggleIconButton @bind-Toggled="PHsensor.pHAlarmOnOff"
                                     Icon="@Icons.Material.Filled.AlarmOff"
                                     Color="MudBlazor.Color.Warning"
                                     ToggledIcon="@Icons.Material.Filled.AlarmOn"
                                     ToggledColor="MudBlazor.Color.Tertiary"
                                     title="@(PHsensor.pHAlarmOnOff ? "On" : "Off")" />
                Canopy Humidity

                @if (PHsensor.CanopyHumAlarmOnOff)
                {
                    <MudNumericField @bind-Value="PHsensor.pHAlarmLow"
                                     Label="Low"
                                     Variant="Variant.Text"
                                     Min="0" Max="14" />

                    <MudNumericField @bind-Value="PHsensor.pHAlarmHigh"
                                     Label="High"
                                     Variant="Variant.Text"
                                     Min="0" Max="14" />
                }
            </MudItem>


        </MudGrid>
        <MudGrid Spacing="10">



        </MudGrid>
    </MudCardContent>
</MudCard>

<HistoryChart HistoryData="@PHsensor.PHsensorHistory"
              NodeID="@NodeID"
              MessageIDs="@historyMessageIDs"
              RequestData="PHsensorChartRequestData"
              UpdateData="PHsensorChartUpdateData"
              isFloatData="true" />



@code {

    [Parameter]
    public int SystemID { get; set; } = 0;
    [Parameter]
    public int BasestationID { get; set; } = 0;
    [Parameter]
    public int NodeID { get; set; } = 0;

    PH_SensorDevice PHsensor;

    private Dictionary<int, HistoryChartMessageIDData> historyMessageIDs = new Dictionary<int, HistoryChartMessageIDData>
    {
        {2560, new HistoryChartMessageIDData{PerameterName = "Canopy Temperature", XAxisName = "Time", YAxisName = "Temperature"}}
    };


    //Event handlers for the HistoryChart component

    //Request historical data
    private void PHsensorChartRequestData(object sender, HistoryChartDataEventArgs e)
    {
        PHsensor.requestHistoricalData(e.NodeID, e.MessageID, e.Hours);
    }

    //Update the historical data and chart
    private void PHsensorChartUpdateData(object sender, HistoryChartDataEventArgs e)
    {
        PHsensor.PHsensorHistory = PHsensor.updateHistoricalData(e.NodeID, e.MessageID, e.Hours);
        base.StateHasChanged();//force a re-render - !!MUST BE CALLED OR EVERYTHING BREAKS!!
    }

    protected override async Task OnInitializedAsync()
    {
        this.PHsensor = new PH_SensorDevice(MqttService, this.SystemID, this.BaseStationID, this.NodeID);

        if (MqttService.IsConnected())
        {
            MqttService.MessageReceived += MqttClient_MessageReceived;
        }
    }

    //Request historical data
    private void historyChartRequestData(object sender, HistoryChartDataEventArgs e)
    {
        PHsensor.requestHistoricalData(e.NodeID, e.MessageID, e.Hours);
    }

    //Update the historical data and chart
    private void historyChartUpdateData(object sender, HistoryChartDataEventArgs e)
    {
        PHsensor.PHsensorHistory = PHsensor.updateHistoricalData(e.NodeID, e.MessageID, e.Hours);
        base.StateHasChanged();//force a re-render - !!MUST BE CALLED OR EVERYTHING BREAKS!!
    }

    private void MqttClient_MessageReceived(object sender, MqttApplicationMessageReceivedEventArgs e)
    {
        //Refresh the UI when a message is received
        if (int.Parse(e.ApplicationMessage.Topic.Split("/")[3]) == NodeID || e.ApplicationMessage.Topic.Split("/")[0] == "historyOut")
        {
            base.StateHasChanged();
        }
    }

    private MudBlazor.Color getBarColor(float? min, float? max, float? value, bool alarm)
    {
        if (min == null || max == null || value == null)
        {
            return MudBlazor.Color.Success;
        }
        if (!alarm)
        {
            return MudBlazor.Color.Success;
        }
        if (value < min)
        {
            return MudBlazor.Color.Info;
        }
        else if (value > max)
        {
            return MudBlazor.Color.Error;
        }
        else
        {
            return MudBlazor.Color.Success;
        }
    }
}


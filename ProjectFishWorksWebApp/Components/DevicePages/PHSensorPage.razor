@using ProjectFishWorksWebApp.Models
@using ProjectFishWorksWebApp.Models.DeviceModels
@using MQTTnet
@inject MQTTnet.ClientLib.MqttService MqttService



<MudCard>
    <MudCardContent>
        <MudText Typo="Typo.h4">pH Value</MudText>
        <MudProgressLinear Value="(double)PHsensor.pHvalue"
                           Min="0"
                           Max="14"
                           Style="height:40px"
                           Color="getBarColor(PHsensor.pHAlarmLow, PHsensor.pHAlarmHigh,PHsensor.pHvalue,PHsensor.pHAlarmOnOff)">
            <MudText Typo="Typo.h4">
                <b>@(Math.Round((decimal)PHsensor.pHvalue, 2))</b>
            </MudText>
        </MudProgressLinear>
    </MudCardContent>
</MudCard>

<MudCard>
    <MudCardHeader>
        <MudText Typo="Typo.h4">Alarms</MudText>
    </MudCardHeader>
    <MudCardContent>
        <MudToggleIconButton @bind-Toggled="PHsensor.pHAlarmOnOff"
                             Icon="@Icons.Material.Filled.AlarmOff"
                             Color="MudBlazor.Color.Warning"
                             ToggledIcon="@Icons.Material.Filled.AlarmOn"
                             ToggledColor="MudBlazor.Color.Tertiary"
                             title="@(PHsensor.pHAlarmOnOff ? "On" : "Off")" />
        pH Value

        @if (PHsensor.pHAlarmOnOff)
        {
            <MudNumericField @bind-Value="PHsensor.pHAlarmLow"
                             Label="Low"
                             Variant="Variant.Text"
                             Min="0" Max="14" />

            <MudNumericField @bind-Value="PHsensor.pHAlarmHigh"
                             Label="High"
                             Variant="Variant.Text"
                             Min="0" Max="14" />
        }
    </MudCardContent>
</MudCard>

<HistoryChart HistoryData="@PHsensor.pHHistory"
              NodeID="@NodeID"
              MessageIDs="@historyMessageIDs"
              RequestData="PHsensorChartRequestData"
              UpdateData="PHsensorChartUpdateData"
              isFloatData="true"
              HistoryReceivedHours="PHsensor.HistoryReceivedHours" />



@code {

    [Parameter]
    public int SystemID { get; set; } = 0;
    [Parameter]
    public int BasestationID { get; set; } = 0;
    [Parameter]
    public int NodeID { get; set; } = 0;

    [CascadingParameter]
    private Task<AuthenticationState>? authenticationState { get; set; }

    PHSensorDevice PHsensor;

    private Dictionary<int, HistoryChartMessageIDData> historyMessageIDs = new Dictionary<int, HistoryChartMessageIDData>
    {
        {2560, new HistoryChartMessageIDData{PerameterName = "pH", XAxisName = "Time", YAxisName = "pH"}}
    };


    //Event handlers for the HistoryChart component

    //Request historical data
    private void PHsensorChartRequestData(object sender, HistoryChartDataEventArgs e)
    {
        PHsensor.requestHistoricalData(e.NodeID, e.MessageID, e.Hours);
    }

    //Update the historical data and chart
    private void PHsensorChartUpdateData(object sender, HistoryChartDataEventArgs e)
    {
        PHsensor.pHHistory = PHsensor.updateHistoricalData(e.NodeID, e.MessageID, e.Hours);
        base.StateHasChanged();//force a re-render - !!MUST BE CALLED OR EVERYTHING BREAKS!!
    }

    protected override async Task OnInitializedAsync()
    {
        if (authenticationState is not null)
        {
            var authState = await authenticationState;
            this.PHsensor = new PHSensorDevice(MqttService, authState.User.Claims.FirstOrDefault(k => k.Type == "sub").Value ?? "", this.SystemID, this.BasestationID, this.NodeID);
        }

        if (MqttService.IsConnected())
        {
            MqttService.MessageReceived += MqttClient_MessageReceived;
        }
    }

    //Request historical data
    private void historyChartRequestData(object sender, HistoryChartDataEventArgs e)
    {
        PHsensor.requestHistoricalData(e.NodeID, e.MessageID, e.Hours);
    }

    //Update the historical data and chart
    private void historyChartUpdateData(object sender, HistoryChartDataEventArgs e)
    {
        PHsensor.pHHistory = PHsensor.updateHistoricalData(e.NodeID, e.MessageID, e.Hours);
        base.StateHasChanged();//force a re-render - !!MUST BE CALLED OR EVERYTHING BREAKS!!
    }

    private void MqttClient_MessageReceived(object sender, MqttApplicationMessageReceivedEventArgs e)
    {
        //Refresh the UI when a message is received
        if (int.Parse(e.ApplicationMessage.Topic.Split("/")[3]) == NodeID || e.ApplicationMessage.Topic.Split("/")[0] == "historyOut")
        {
            base.StateHasChanged();
        }
    }

    private MudBlazor.Color getBarColor(float? min, float? max, float? value, bool alarm)
    {
        if (min == null || max == null || value == null)
        {
            return MudBlazor.Color.Success;
        }
        if (!alarm)
        {
            return MudBlazor.Color.Success;
        }

        if (value < min || value > max)
        {
            return MudBlazor.Color.Error;
        }
        else
        {
            return MudBlazor.Color.Success;
        }
    }
}


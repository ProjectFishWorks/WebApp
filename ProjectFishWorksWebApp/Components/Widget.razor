@inject NavigationManager NavigationManager

<MudCard Elevation="2">
    <MudCardHeader >
            @if (_TitleEdit)
            {
                <MudTextField @bind-Value="@Title" Label="Outlined" Variant="Variant.Outlined" Typo="Typo.h5"></MudTextField>
                <MudIconButton Icon="@Icons.Material.Filled.Done" Color="MudBlazor.Color.Primary" OnClick="EditTitleOnClick" />
            }
            @if (!_TitleEdit)
            {
                <MudText Typo="Typo.h5">
                    @Title
                </MudText>
            }
    </MudCardHeader>
    <MudCardContent>
        @ChildContent
    </MudCardContent>
    <MudCardActions>
        <MudButton Variant="Variant.Text" Color="MudBlazor.Color.Primary" OnClick="MoreInfoOnClick">More Info</MudButton>
        <MudButton Variant="Variant.Text" Color="MudBlazor.Color.Primary" OnClick="EditTitleOnClick">Edit Name</MudButton>
    </MudCardActions>
</MudCard>

@code {

    [Parameter]
    public RenderFragment ChildContent { get; set; }

    [Parameter]
    public int SystemID { get; set; }

    [Parameter]
    public int BaseStationID { get; set; }

    [Parameter]
    public int NodeID { get; set; }

    [Parameter]
    public string Title { get; set; }

    private string _Title;

    private bool _TitleEdit = false;

    [Parameter]
    public EventCallback<string> TitleChanged { get; set; }

    protected override void OnInitialized()
    {
    }

    private async Task UpdateTitle(string value)
    {
        Title = value;
        await TitleChanged.InvokeAsync(value);
    }

    void MoreInfoOnClick()
    {
        NavigationManager.NavigateTo($"Device?SystemID={SystemID}&BaseStationID={BaseStationID}&NodeID={NodeID}");
    }

    async void EditTitleOnClick()
    {
        _TitleEdit = !_TitleEdit;
        if(!_TitleEdit)
        {
            await UpdateTitle(Title);
        }
    }

}

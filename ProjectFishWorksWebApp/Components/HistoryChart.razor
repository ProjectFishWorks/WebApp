@using MQTTnet
@using ProjectFishWorksWebApp.Models
@inject MQTTnet.ClientLib.MqttService MqttService
<MudCard>
    <MudCardHeader>
<MudStack Spacing="3">
    <MudText Typo="Typo.h4">History</MudText>
    @if(MessageIDs.Count > 1)
    {
        <MudSelect Label="Message ID" @bind-Value="_messageID" @bind-Value:after="onMessageIDChange" Variant="Variant.Outlined">
            @foreach (var messageID in MessageIDs)
            {
                <MudSelectItem Value="@messageID.Key">@messageID.Value.PerameterName</MudSelectItem>
            }
        </MudSelect>
    }

        
        <MudStack Row="true">
                <MudText Typo="Typo.h5">@MessageIDs[_messageID].PerameterName</MudText>
                <MudIconButton @onclick="onRefreshHistory"
                               Icon="@Icons.Material.Filled.Refresh" />
            </MudStack>
        </MudStack>

        </MudCardHeader>
        <MudCardContent>
            <MudStack Spacing="4">
                <MudItem xs="2">
                    <MudNumericField HideSpinButtons="true" @bind-Value="_historyHours" @bind-Value:after="onHoursUpdate" Label="Hours" Min="1" Max="24*7" FullWidth="false" />
                </MudItem>

            @if ((HistoryReceivedHours - 1) < _historyHours && HistoryData != null)
                {
                    <MudText Typo="Typo.h4" Align="MudBlazor.Align.Center">History Loading</MudText>
                    <MudProgressLinear Size="MudBlazor.Size.Large" Min="0" Max="_historyHours" Value="HistoryReceivedHours - 1" Color="MudBlazor.Color.Primary"></MudProgressLinear>
                }




            @if (HistoryData != null)
            {
                @if ((HistoryReceivedHours - 1) >= _historyHours)
                {
                    <ApexChart TItem="HistoryDataRow"
                               Options="@_options"
                               XAxisType="XAxisType.Datetime"
                               @ref="_chart">
                        <ApexPointSeries TItem="HistoryDataRow"
                                         Items="_historyData"
                                         Name="Value"
                                         SeriesType="SeriesType.Line"
                                         XValue="@(e => e.time)"
                                         YValue="@(e => isFloatData ? e.dataFloat : e.data)"
                                         OrderBy="e=>e.X" />

                    </ApexChart>
                }
            }
            else
            {
                <MudText Typo="Typo.h4" Align="MudBlazor.Align.Center">History Loading</MudText>
                <MudProgressLinear Size="MudBlazor.Size.Medium" Color=" MudBlazor.Color.Primary" Indeterminate="true" />
  

            }
            </MudStack>
        </MudCardContent>
    </MudCard>


@code {

    //Data for the chart
    [Parameter]
    public List<HistoryDataRow>? HistoryData
    {
        get => _historyData;

        set
        {
            _historyData = value;
            if (_chart != null)
            {
                _chart.UpdateSeriesAsync(true);
            }
        }
    }

    private int _MessageID;

    //Node ID to get the data from
    [Parameter]
    public int NodeID { get; set; } = 0;

    //Message ID to get the data from
    [Parameter]
    public Dictionary<int, HistoryChartMessageIDData> MessageIDs { get; set; }

    //Event Handler for requesting history data
    [Parameter]
    public EventHandler<HistoryChartDataEventArgs>? RequestData { get; set; }

    //Event Handler for updating history data
    [Parameter]
    public EventHandler<HistoryChartDataEventArgs>? UpdateData { get; set; }

    [Parameter]
    public bool isFloatData { get; set; } = false;

    [Parameter]
    public int HistoryReceivedHours { get; set; }

    private List<HistoryDataRow>? _historyData;

    //Reference to the chart component
    private ApexChart<HistoryDataRow>? _chart;

    //Options for the chart
    private ApexChartOptions<HistoryDataRow>? _options;

    private int _messageID;

    //Number of hours to get the history data for
    private int _historyHours = 1;

    private void MqttClient_MessageReceived(object sender, MqttApplicationMessageReceivedEventArgs e)
    {
        if (e.ApplicationMessage.Topic.StartsWith("historyOut"))
        {   
            //If we get incoming history data, update the history data
            if(UpdateData != null)
            {
                UpdateData.Invoke(this, new HistoryChartDataEventArgs(NodeID, _messageID, _historyHours));
            }
        }
    }

    //Refresh button click event
    private void onRefreshHistory(MouseEventArgs e)
    {
        Console.WriteLine("Refresh History");
        if(RequestData != null)
        {
            //Request new history data
            RequestData.Invoke(this, new HistoryChartDataEventArgs(NodeID, _messageID, _historyHours));
        }
    }

    //When the number of history hours is updated
    private void onHoursUpdate()
    {
        Console.WriteLine("Hours Updated");
        if(RequestData != null)
        {
            RequestData.Invoke(this, new HistoryChartDataEventArgs(NodeID, _messageID, _historyHours));
        }
    }

    private void onMessageIDChange()
    {
        Console.WriteLine("Message ID Changed");

        _options.Yaxis = new List<YAxis>
        {
            new YAxis
            {
                Title = new AxisTitle
                {
                    Text = MessageIDs[_messageID].YAxisName,
                },
            }
        };

        _options.Xaxis = new XAxis
        {
            TickAmount = 8,
            Title = new AxisTitle
            {
                Text = MessageIDs[_messageID].XAxisName,
            },
            Labels = new XAxisLabels
            {
                DatetimeFormatter = new DatetimeFormatter
                {
                    Year = "yyyy",
                    Month = "MMM 'yy",
                    Day = "dd MMM",
                    Hour = "HH:mm"
                },
                DatetimeUTC = false //Display in local time
            }
        };

        _chart.UpdateOptionsAsync(true, true, true);
        if(RequestData != null)
        {
            RequestData.Invoke(this, new HistoryChartDataEventArgs(NodeID, _messageID, _historyHours));
        }
    }

    protected override void OnInitialized()
    {
        if (MqttService.IsConnected())
        {
            MqttService.MessageReceived += MqttClient_MessageReceived;
        }

        _messageID = MessageIDs.Keys.First();

        if (RequestData != null)
        {
            //Request new history data
            RequestData.Invoke(this, new HistoryChartDataEventArgs(NodeID, _messageID, _historyHours));
        }

        //Configure the chart options
        _options = new ApexChartOptions<HistoryDataRow>
            {
                Chart = new Chart
                {
                    Type = ApexCharts.ChartType.Line,
                    Toolbar = new Toolbar
                    {
                        Show = true
                    }
                }
            };
        _options.Tooltip = new Tooltip
            {
                Enabled = true,
                X = new TooltipX
                {
                    Format = "dd MMM yyyy HH:mm"
                }
            };

        _options.Grid = new Grid
            {
                Show = true,
                Xaxis = new GridXAxis
                {
                    Lines = new Lines
                    {
                        Show = true
                    }
                },
                StrokeDashArray = 4
            };

        onMessageIDChange();


    }
}

@page "/device"

@using ProjectFishWorksWebApp.Models

@using MQTTnet
@inject MQTTnet.ClientLib.MqttService MqttService

<PageTitle>Device - @DeviceData.DeviceName</PageTitle>

<MudStack>
    <MudText Typo="Typo.h4">@DeviceData.DeviceName</MudText>
    <MudText Typo="Typo.subtitle1">@(_manifests.Manifests.First(m => (m.SystemID == SystemID && m.BaseStationID == BaseStationID)).BaseStationName) - ID: @(DeviceData.NodeID)</MudText>
    @{
    IDictionary<string, object> perameters = new Dictionary<string, object>();
    perameters.Add("SystemID", SystemID);
    perameters.Add("BaseStationID", BaseStationID);
    perameters.Add("NodeID", NodeID);

    <ErrorBoundary>
    <ChildContent>
        <DynamicComponent Type="@_manifests.stringToPageType(DeviceData.DeviceType)" Parameters="@perameters" />
    </ChildContent>
    <ErrorContent>
        <MudText Typo="Typo.h6" Color="MudBlazor.Color.Error"><MudIcon Icon="@Icons.Material.Filled.Warning" />  Error Loading Device Data</MudText>
    </ErrorContent>

    </ErrorBoundary>


    }
</MudStack>

@code {

    [SupplyParameterFromQuery]
    public int SystemID { get; set; }

    [SupplyParameterFromQuery]
    public int BaseStationID { get; set; }

    [SupplyParameterFromQuery]
    public int NodeID { get; set; }

    private BaseStationManifests _manifests;

    public BaseStationManifestData.DeviceData DeviceData
    {
        get
        {
            return _manifests.Manifests.First(m => (m.SystemID == SystemID && m.BaseStationID == BaseStationID)).Devices.First(d => d.NodeID == NodeID);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        MqttService.MessageReceived += MqttClient_MessageReceived;
        _manifests = new BaseStationManifests(SystemID, MqttService);
    }

    private void MqttClient_MessageReceived(object sender, MqttApplicationMessageReceivedEventArgs e)
    {
        base.StateHasChanged();
    }

}

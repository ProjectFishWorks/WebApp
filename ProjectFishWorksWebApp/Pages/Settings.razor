@page "/settings"
@attribute [Authorize]

@using MQTTnet
@inject MQTTnet.ClientLib.MqttService MqttService

@using System.Text.Json;

@using Newtonsoft.Json;

@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@inject IAccessTokenProvider TokenProvider

<PageTitle>Settings</PageTitle>

<MudCard>
    <MudCardHeader>
        <MudText Typo="Typo.h5">Connection Stats</MudText>
    </MudCardHeader>
    <MudCardContent>
        @if (MqttService.IsConnected())
        {
            <MudChip T="string" Color="MudBlazor.Color.Success">Connected</MudChip>
        }
        else
        {
            <MudChip T="string" Color="MudBlazor.Color.Error">Not Connected</MudChip>
        }
        <MudText Typo="Typo.h6">Messages Received : @MqttService.MeassagesReceived</MudText>
    </MudCardContent>
</MudCard>

<MudCard>
    <MudCardHeader>
        <MudText Typo="Typo.h5">Edit Manifest Files</MudText>
    </MudCardHeader>
    <MudCardContent>
        <MudSelect Label="Base Station ID" Variant="Variant.Outlined" Typo="Typo.h6" @bind-Value="_currentBaseStationID">
            @foreach (var id in baseStationIDs)
            {
                <MudSelectItem Value="@id">@id</MudSelectItem>
            }
        </MudSelect>
        <MudTextField Label="Manifest JSON" Variant="Variant.Outlined" Typo="Typo.h6" @bind-Value="ManifestJSON" AutoGrow></MudTextField>
    </MudCardContent>
</MudCard>

<MudCard>
    <MudCardHeader>
        <MudText Typo="Typo.h5">Raw Received Messages</MudText>
    </MudCardHeader>
    <MudCardContent>
        <MudDataGrid Items="@MqttService.AllMessages" Filterable="false" SortMode="@SortMode.Multiple" Groupable="false">
            <Columns>
                <PropertyColumn Property="x => x.Key" Title="Topic" />
                <PropertyColumn Property="x => x.Value" Title="Data" />
            </Columns>
        </MudDataGrid>
    </MudCardContent>

</MudCard>

@code {

    private int _systemID = 0;

    private int _currentBaseStationID = 0;
    private string _currentManifest = "";

    public List<int> baseStationIDs
    {
        get
        {
            var messsages = MqttService.AllMessages.Where(x => (x.Key.StartsWith($"manifestOut/{_systemID}")));

            return messsages.Select(x => x.Key.Split('/')[2]).Distinct().Select(x => int.Parse(x)).ToList();

        }
    }

    public string ManifestJSON
    {
        get
        {

            var message = MqttService.AllMessages.Where(x => x.Key == $"manifestOut/{_systemID}/{_currentBaseStationID}").FirstOrDefault();
            if (message.Value != null)
            {
                string text = JsonConvert.SerializeObject(JsonConvert.DeserializeObject(message.Value), Formatting.Indented);
                _currentManifest = text;
                return text;
            }
            else
            {
                return "";
            }
        }
        set
        {
            MqttApplicationMessage message = new MqttApplicationMessageBuilder()
                .WithTopic($"manifestIn/{_systemID}/{_currentBaseStationID}")
                .WithPayload(value)
                .Build();
            MqttService.Publish(message);
        }
    }

    protected override void OnInitialized()
    {
        MqttService.MessageReceived += MqttClient_MessageReceived;
    }

    protected override async Task OnInitializedAsync()
    {


    }

    private void MqttClient_MessageReceived(object sender, MqttApplicationMessageReceivedEventArgs e)
    {
        base.StateHasChanged();
    }
}L
@page "/"
@page "/dashboard"

@using MQTTnet
@using System.Text.Json;
@inject MQTTnet.ClientLib.MqttService MqttService

@using ProjectFishWorksWebApp.Components
@using ProjectFishWorksWebApp.Models

<PageTitle>Project Fish Work - Dashboard</PageTitle>


@foreach (BaseStationManifestData manifest in _manifests.Manifests)
{
    <MudCard>
        <MudCardHeader>
            <MudText Typo="Typo.h5">@manifest.BaseStationName</MudText>
        </MudCardHeader>
        <MudCardContent>
            @foreach(var DeviceData in manifest.Devices)
            {
                IDictionary<string, object> perameters = new Dictionary<string, object>();
                perameters.Add("SystemID", SystemID);
                perameters.Add("BaseStationID", manifest.BaseStationID);
                perameters.Add("NodeID", DeviceData.NodeID);

                <Widget SystemID="@SystemID" BaseStationID="manifest.BaseStationID" NodeID="DeviceData.NodeID" @bind-Title="DeviceData.DeviceName" @bind-Title:after="@(() => {_manifests.sendManifest(manifest);})">
                    @if (_manifests.stringToWidgetType(DeviceData.DeviceType) != null)
                    {
                        <DynamicComponent Type="@_manifests.stringToWidgetType(DeviceData.DeviceType)" Parameters="@perameters" />
                    }
                </Widget>

            }
        </MudCardContent>
    </MudCard>

}

@code{
    public int SystemID { get; set; } = 0;

    private BaseStationManifests _manifests;

    protected override async Task OnInitializedAsync()
    {
        MqttService.MessageReceived += MqttClient_MessageReceived;
        _manifests = new BaseStationManifests(SystemID, MqttService);
    }

    private void MqttClient_MessageReceived(object sender, MqttApplicationMessageReceivedEventArgs e)
    {
        base.StateHasChanged();
    }

 }
@page "/"
@page "/dashboard"

@using MQTTnet
@using System.Text.Json;
@inject MQTTnet.ClientLib.MqttService MqttService

@using ProjectFishWorksWebApp.Components
@using ProjectFishWorksWebApp.Models

<PageTitle>Project Fish Work - Dashboard</PageTitle>


@foreach (BaseStationManifestData manifest in Manifests)
{
    <MudCard>
        <MudCardHeader>
            <MudText Typo="Typo.h5">@manifest.BaseStationName</MudText>
        </MudCardHeader>
        <MudCardContent>
            @foreach(var DeviceData in manifest.Devices)
            {
                IDictionary<string, object> perameters = new Dictionary<string, object>();
                perameters.Add("SystemID", SystemID);
                perameters.Add("BaseStationID", manifest.BaseStationID);
                perameters.Add("NodeID", DeviceData.NodeID);

                <Widget SystemID="@SystemID" BaseStationID="manifest.BaseStationID" NodeID="DeviceData.NodeID" @bind-Title="DeviceData.DeviceName" @bind-Title:after="@(() => {sendManifest(manifest);})">
                    @if (stringToType(DeviceData.DeviceType) != null){
                        <DynamicComponent Type="@stringToType(DeviceData.DeviceType)" Parameters="@perameters"/>
                    }
                </Widget>

            }
        </MudCardContent>
    </MudCard>

}

@code{
    public int SystemID { get; set; } = 0;

    List<BaseStationManifestData> _manifests;

    public List<BaseStationManifestData> Manifests
    {
        get
        {
            var messsages = MqttService.AllMessages.Where(x => (x.Key.StartsWith($"manifestOut/{SystemID}")));

            _manifests = new List<BaseStationManifestData>();

            foreach (var message in messsages)
            {
                var manifest = JsonSerializer.Deserialize<BaseStationManifestData>(message.Value);
                if (manifest != null)
                {
                    _manifests.Add(manifest);
                }
                else
                {
                    Console.WriteLine($"Failed to parse manifest {message.Value}");
                }
            }
            return _manifests;
        }

    }

    private void sendManifest(BaseStationManifestData manifest)
    {
        string payload = JsonSerializer.Serialize(manifest);
        MqttApplicationMessage message = new MqttApplicationMessageBuilder()
            .WithTopic($"manifestOut/{SystemID}/{manifest.BaseStationID}")
            .WithPayload(payload)
            .WithRetainFlag()
            .Build();
        MqttService.Publish(message);
    }

    protected override async Task OnInitializedAsync()
    {
        MqttService.MessageReceived += MqttClient_MessageReceived;
    }

    private void MqttClient_MessageReceived(object sender, MqttApplicationMessageReceivedEventArgs e)
    {
        base.StateHasChanged();
    }

    public Type? stringToType(string typeName)
    {
        return Type.GetType($"ProjectFishWorksWebApp.Components.DeviceWidgets.{typeName}Widget");
    }
 }
@inherits LayoutComponentBase

@inject NavigationManager NavigationManager

@inject SignOutSessionStateManager SignOutManager

@inject MQTTnet.ClientLib.MqttService MqttService

@inject IDialogService DialogService

@using ProjectFishWorksWebApp.Components

@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@inject IAccessTokenProvider TokenProvider

@* Required *@
<MudThemeProvider @ref="@_mudThemeProvider" @bind-IsDarkMode="@_isDarkMode" Theme="FishSenseWebApp" />
<MudPopoverProvider />

@* Needed for dialogs *@
<MudDialogProvider />

@* Needed for snackbars *@
<MudSnackbarProvider />

<MudLayout>
    <MudAppBar Elevation="0" Color="MudBlazor.Color.Primary">
        <MudIconButton Icon="@Icons.Material.Filled.ArrowBack" Color="MudBlazor.Color.Inherit" Edge="Edge.Start" Href="Dashboard" />
        <MudText Typo="Typo.h5" Class="ml-3">Fish Sense Web App</MudText>

        <MudSpacer />
        <AuthorizeView>
            <Authorized>
                <MudText Typo="Typo.h6">@context.User.Identity.Name</MudText>
            </Authorized>
        </AuthorizeView>
        <MudMenu Label="Open Menu" Icon="@Icons.Material.Filled.MoreVert" Color="MudBlazor.Color.Inherit" AnchorOrigin="Origin.BottomRight" TransformOrigin="Origin.TopRight">
            <MudMenuItem Icon="@Icons.Material.Filled.Settings" Href="Settings">Settings</MudMenuItem>
            <MudMenuItem Icon="@(_isDarkMode ? Icons.Material.Filled.LightMode : Icons.Material.Filled.DarkMode)" OnClick="OnDarkModeSwitchClick">@(_isDarkMode ? "Light Mode" : "Dark Mode") </MudMenuItem>
            <AuthorizeView>
                <Authorized>
                    <MudMenuItem Icon="@Icons.Material.Filled.Logout" OnClick="BeginSignOut">Logout</MudMenuItem>
                </Authorized>
                <NotAuthorized>
                    <MudMenuItem Icon="@Icons.Material.Filled.Login" Href="authentication/login">Login</MudMenuItem>
                </NotAuthorized>
            </AuthorizeView>

        </MudMenu>
    </MudAppBar>
    <MudMainContent>
        <MudContainer MaxWidth="MaxWidth.Small">
            @Body
        </MudContainer>
    </MudMainContent>
</MudLayout>

<style>
    .dialog-background {
        backdrop-filter: blur(10px);
    }
</style>

@code {
    private MudTheme FishSenseWebApp = new MudTheme
    {
        PaletteLight = new PaletteLight()
        {
                Primary = "#1C4CB6",
                Secondary = "#C211D5"
        },
        PaletteDark = new PaletteDark()
        {
        },

        LayoutProperties = new LayoutProperties()
        {
        }
    };

    private bool _isDarkMode = false;

    private bool _dialogOpen = false;

    private MudThemeProvider _mudThemeProvider;

    private string MqttClientConnection { get; set; }

    private string mqttWebSocket { get; set; } = "emqx.projectfishworks.ca:8084/mqtt";
    //private string mqttUsername { get; set; } = "fishworks-dev";
    //private string mqttPassword { get; set; } = "F1shworks!";

    private string topic { get; set; } = "auth0|6780a2d9d25eaaea97f7fe1b/#";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            StateHasChanged();
        }
    }

    private async Task BeginSignOut(MouseEventArgs args)
    {
        await SignOutManager.SetSignOutState();
        NavigationManager.NavigateTo("authentication/logout");

    }

    private void OnDarkModeSwitchClick()
    {
        _isDarkMode = !_isDarkMode;
        StateHasChanged();
    }

    protected override bool ShouldRender()
    {
        if (!MqttService.IsConnected() )
        {
            //OpenDialogAsync();
        }
        return base.ShouldRender();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
    }

    private async Task OpenDialogAsync()
    {
        _dialogOpen = true;
        Console.WriteLine("Opening dialog");
        var options = new DialogOptions 
        { 
            BackgroundClass = "dialog-background",
            FullWidth = true,
            BackdropClick = false,
            CloseOnEscapeKey = false,
            NoHeader = true
        };

        var dialog = await DialogService.ShowAsync<Components.LoginDialog>("MQTT Connection", options);
        var result = await dialog.Result;
        _dialogOpen = false;
    }

    protected override async Task OnInitializedAsync()
    {
        MqttService.Disconnected += MqttService_Disconnected;
        Console.WriteLine("Getting Token");
        var tokenResult = await TokenProvider.RequestAccessToken(
            new AccessTokenRequestOptions
            {
                    Scopes = new[] { "emqx.projectfishworks.ca" }
            });

        if (tokenResult.TryGetToken(out var token))
        {
            Console.WriteLine("Bearer Got Token: " + token.Value);
            Console.WriteLine("Connecting to MQTT...");

            var mqttClientOptions = new MQTTnet.Client.Options.MqttClientOptionsBuilder()
            .WithClientId(Guid.NewGuid().ToString())
            .WithCredentials("", token.Value)
            .WithWebSocketServer(mqttWebSocket)
            .WithTls()
            .WithCleanSession()
            .Build();

            MqttService.Init(Guid.NewGuid().ToString(), mqttClientOptions);

            var result = await MqttService.Connect();
            MqttClientConnection = result ? "Connected" : "Error logging in";

            Console.WriteLine(MqttClientConnection);

            base.StateHasChanged();

            await MqttService.Subscribe(topic);
        }
    }
    

    private void MqttService_Disconnected(object sender, EventArgs e)
    {
        base.StateHasChanged();

    }

    private void MqttService_Connected(object sender, EventArgs e)
    {
        base.StateHasChanged();
    }

}

